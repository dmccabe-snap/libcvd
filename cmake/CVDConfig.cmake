#.rst:
# CVDConfig
# --------
#
# Find the native CVD includes and library.
#
# Result Variables
# ^^^^^^^^^^^^^^^^
#
# This module defines the following variables:
#
# ::
#
#   CVD_INCLUDE_DIRS   - where to find cvd/*.h.
#   CVD_LIBRARIES      - List of libraries when using CVD.
#   CVD_FOUND          - True if CVD found.


include(${CMAKE_CURRENT_LIST_DIR}/CVDFindAllDeps.cmake)


find_path(CVD_INCLUDE_DIR NAMES cvd/config.h PATH_SUFFIXES include)
find_library(CVD_LIBRARY_RELEASE NAMES cvd PATH_SUFFIXES lib)
find_library(CVD_LIBRARY_DEBUG NAMES cvd_debug PATH_SUFFIXES lib)
find_library(CVD_GL_LIBRARY_RELEASE NAMES cvdgl PATH_SUFFIXES lib)
find_library(CVD_GL_LIBRARY_DEBUG NAMES cvdgl_debug PATH_SUFFIXES lib)
find_library(CVD_IMAGEIO_LIBRARY_RELEASE NAMES cvdimageio PATH_SUFFIXES lib)
find_library(CVD_IMAGEIO_LIBRARY_DEBUG NAMES cvdimageio_debug PATH_SUFFIXES lib)
find_library(CVD_VIDEO_LIBRARY_RELEASE NAMES cvdvideo PATH_SUFFIXES lib)
find_library(CVD_VIDEO_LIBRARY_DEBUG NAMES cvdvideo_debug PATH_SUFFIXES lib)

select_library_configurations(CVD)
select_library_configurations(CVD_GL)
select_library_configurations(CVD_IMAGEIO)
select_library_configurations(CVD_VIDEO)
mark_as_advanced(
	CVD_LIBRARY_RELEASE CVD_LIBRARY_DEBUG
	CVD_GL_LIBRARY_RELEASE CVD_GL_LIBRARY_DEBUG
	CVD_IMAGEIO_LIBRARY_RELEASE CVD_IMAGEIO_LIBRARY_DEBUG
	CVD_VIDEO_LIBRARY_RELEASE CVD_VIDEO_LIBRARY_DEBUG)

find_package_handle_standard_args(CVD_GL REQUIRED_VARS CVD_GL_LIBRARY CVD_INCLUDE_DIR)
find_package_handle_standard_args(CVD_IMAGEIO REQUIRED_VARS CVD_IMAGEIO_LIBRARY CVD_INCLUDE_DIR NAME_MISMATCHED)
find_package_handle_standard_args(CVD_VIDEO REQUIRED_VARS CVD_VIDEO_LIBRARY CVD_INCLUDE_DIR NAME_MISMATCHED)
find_package_handle_standard_args(CVD REQUIRED_VARS CVD_LIBRARY CVD_INCLUDE_DIR HANDLE_COMPONENTS NAME_MISMATCHED)

if(CVD_FOUND)
	set(CVD_INCLUDE_DIRS ${CVD_INCLUDE_DIR} ${CVD_DEP_INCLUDES_PUBLIC})
	set(CVD_LIBRARIES ${CVD_LIBRARY} ${CVD_DEP_LIBS})
	add_library(CVD::CVD UNKNOWN IMPORTED)
	set_target_properties(CVD::CVD PROPERTIES
		IMPORTED_LOCATION ${CVD_LIBRARY}
		INTERFACE_INCLUDE_DIRECTORIES ${CVD_INCLUDE_DIR};${CVD_DEP_INCLUDES_PUBLIC}
		INTERFACE_LINK_LIBRARIES CVD::CVD;${CVD_DEP_LIBS})
endif()
if(CVD_IMAGEIO_FOUND)
	set(CVD_IMAGEIO_INCLUDE_DIRS ${CVD_INCLUDE_DIR} ${CVD_IMAGEIO_DEP_INCLUDES_PUBLIC})
	set(CVD_IMAGEIO_LIBRARIES ${CVD_IMAGEIO_LIBRARY} ${CVD_IMAGEIO_DEP_LIBS})
	add_library(CVD::ImageIO UNKNOWN IMPORTED)
	set_target_properties(CVD::ImageIO PROPERTIES
		IMPORTED_LOCATION ${CVD_IMAGEIO_LIBRARY}
		INTERFACE_INCLUDE_DIRECTORIES ${CVD_INCLUDE_DIR};${CVD_IMAGEIO_DEP_INCLUDES_PUBLIC}
		INTERFACE_LINK_LIBRARIES CVD::CVD;${CVD_IMAGEIO_DEP_LIBS})
endif()
if(CVD_GL_FOUND)
	set(CVD_GL_INCLUDE_DIRS ${CVD_INCLUDE_DIR} ${CVD_IMAGEIO_DEP_INCLUDES_PUBLIC})
	set(CVD_GL_LIBRARIES ${CVD_GL_LIBRARY} ${CVD_GL_DEP_LIBS})
	add_library(CVD::GL UNKNOWN IMPORTED)
	set_target_properties(CVD::GL PROPERTIES
		IMPORTED_LOCATION ${CVD_GL_LIBRARY}
		INTERFACE_INCLUDE_DIRECTORIES ${CVD_INCLUDE_DIR};${CVD_GL_DEP_INCLUDES_PUBLIC}
		INTERFACE_LINK_LIBRARIES CVD::CVD;${CVD_GL_DEP_LIBS})
endif()
if(CVD_VIDEO_FOUND)
	set(CVD_VIDEO_INCLUDE_DIRS ${CVD_INCLUDE_DIR} ${CVD_VIDEO_DEP_INCLUDES_PUBLIC})
	set(CVD_VIDEO_LIBRARIES ${CVD_VIDEO_LIBRARY} ${CVD_VIDEO_DEP_LIBS})
	add_library(CVD::Video UNKNOWN IMPORTED)
	set_target_properties(CVD::Video PROPERTIES
		IMPORTED_LOCATION ${CVD_VIDEO_LIBRARY}
		INTERFACE_INCLUDE_DIRECTORIES ${CVD_INCLUDE_DIR};${CVD_VIDEO_DEP_INCLUDES_PUBLIC}
		INTERFACE_LINK_LIBRARIES CVD::CVD;${CVD_VIDEO_DEP_LIBS})
endif()

mark_as_advanced(CVD_LIBRARY CVD_GL_LIBRARY CVD_IMAGEIO_LIBRARY CVD_VIDEO_LIBRARY CVD_INCLUDE_DIR)
